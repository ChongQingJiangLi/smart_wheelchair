<launch>

  <!-- Kinect -->
  <node pkg="nodelet" type="nodelet" name="kinect_nodelet" output="screen" respawn="true" args="manager"/>

  <node pkg="nodelet" type="nodelet" name="openni_camera" args="load openni_camera/OpenNINodelet kinect_nodelet">
    <!--param name="topic" value="first" /-->
    <!--param name="device_id" value="2@3" --> <!-- this line uses device on usb bus 2 and addres 3 -->
    <!--param name="device_id" value="B00367707227042B"/--> <!-- this line uses device with given serial number -->
    
    <param name="device_id" value="#1"/> <!-- this line uses first enumerated device -->

    <rosparam command="load" file="$(find openni_camera)/info/openni_params.yaml" />
    <param name="rgb_frame_id" value="/openni_rgb_optical_frame" />
    <param name="depth_frame_id" value="/openni_depth_optical_frame" />
    <param name="use_indices" value="false" />
    <param name="depth_registration" value="false" />
    <param name="image_mode" value="8" />
    <param name="depth_mode" value="8" />
    <param name="debayering" value="0" />
    <param name="depth_time_offset" value="0" />
    <param name="image_time_offset" value="0" />

    <rosparam command="load" file="$(find openni_camera)/info/openni_params.yaml" />
  </node>
  <include file="$(find openni_camera)/launch/kinect_frames.launch" />

  <!-- throttling -->
  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle kinect_nodelet">
    <param name="max_rate" value="30.0"/> <!-- This number is terribly inaccurate.  20 seems to produce outputs of 15Hz; 30Hz in produces 20Hz out -->
    <remap from="cloud_in" to="/camera/depth/points" />
    <remap from="cloud_out" to="/camera/depth/points_throttled" />
  </node>

  <!-- voxel: super CPU intensive, do not use? -->
  <!-- The CPU usage very much depends on the leaf_size.  It's acceptable with some throttling and at 0.01.  Without throttling or set to something ridiuclous like 0.001, the number of checks become insane. -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid_nodelet" args="load pcl/VoxelGrid kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points" />
    <remap from="~output" to="/camera/depth/points_voxel" />
    <rosparam>
      <!-- Don't really need any of this, and a missing field_name will cause it to automatically apply to all axes. -->
      filter_field_name: ""
      filter_limit_min: -5.0
      filter_limit_max: 5.0
      filter_limit_negative: False
      leaf_size: 0.025
    </rosparam>
  </node>

  <!-- Fake Laser - Just for fun because it's cool. -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser" args="load pointcloud_to_laserscan/CloudToScan kinect_nodelet">
    <param name="output_frame_id" value="/openni_camera" />
    <remap from="cloud" to="/camera/depth/points" />
    <remap from="scan" to="/kinect_scan" />
  </node>

  <!-- Next two are used for reflexive collision avoidance. -->
  <!-- Otto is 1.140m long by 0.661m wide by 0.902m tall (without Kinect) -->
  <!-- The center of rotation is ~9.1cm behind the middle. -->
  <node pkg="nodelet" type="nodelet" name="passthrough_x" args="load pcl/PassThrough kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points" />
    <remap from="~output" to="/camera/depth/points_bubble_x" />
    <rosparam> <!-- Weird frame for the camera. -->
      filter_field_name: x
      filter_limit_min: -0.50
      filter_limit_max: 0.50
      filter_limit_negative: False
    </rosparam>
  </node>
  
  <node pkg="nodelet" type="nodelet" name="passthrough_xx" args="load pcl/PassThrough kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points_bubble_x" />
    <remap from="~output" to="/camera/depth/points_bubble_xx" />
    <rosparam>
      filter_field_name: x
      filter_limit_min: 0.0
      filter_limit_max: 3.0
      filter_limit_negative: False
      input_frame: /base_link
      output_frame: /base_link
    </rosparam>
  </node>
  
  <node pkg="nodelet" type="nodelet" name="passthrough_xxz" args="load pcl/PassThrough kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points_bubble_xx" />
    <remap from="~output" to="/camera/depth/points_collision" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.2
      filter_limit_max: 2.0
      filter_limit_negative: False
      input_frame: /base_link
      output_frame: /base_link
    </rosparam>
  </node>

  <node pkg="tf" type="static_transform_publisher" name="kinectTFPub" args="0.1651 0 1.7272 0 0.174532925 0 base_link openni_camera 100" />
</launch>
