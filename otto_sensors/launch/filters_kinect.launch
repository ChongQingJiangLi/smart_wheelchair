<launch>
  
  <node pkg="nodelet" type="nodelet" name="kinect_nodelet" output="screen" respawn="true" args="manager"/>
  
    <!-- throttling -->
  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" respawn="true" args="load pointcloud_to_laserscan/CloudThrottle kinect_nodelet">
    <param name="max_rate" value="30.0"/> <!-- This number is terribly inaccurate.  20 seems to produce outputs of 15Hz; 30Hz in produces 20Hz out -->
    <remap from="cloud_in" to="/camera/depth/points" />
    <remap from="cloud_out" to="/camera/depth/points_throttled" />
  </node>

  <!-- voxel: super CPU intensive, do not use? -->
  <!-- The CPU usage very much depends on the leaf_size.  It's acceptable with some throttling and at 0.01.  Without throttling or set to something ridiuclous like 0.001, the number of checks become insane. -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid_nodelet" respawn="true" args="load pcl/VoxelGrid kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points" />
    <remap from="~output" to="/camera/depth/points_voxel" />
    <rosparam>
      <!-- Don't really need any of this, and a missing field_name will cause it to automatically apply to all axes. -->
      filter_field_name: ""
      filter_limit_min: -5.0
      filter_limit_max: 5.0
      filter_limit_negative: False
      leaf_size: 0.025
    </rosparam>
  </node>

  <!-- Fake Laser - Just for fun because it's cool. -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser" respawn="true" args="load pointcloud_to_laserscan/CloudToScan kinect_nodelet">
    <remap from="cloud" to="/camera/depth/points" />
    <remap from="scan" to="/kinect_scan" />
    <param name="output_frame_id" value="/openni_depth_frame" />
  </node>

  <!-- Next two are used for reflexive collision avoidance. -->
  <!-- Otto is 1.140m long by 0.661m wide by 0.902m tall (without Kinect) -->
  <!-- The center of rotation is ~9.1cm behind the middle. -->
  <!-- This one controls the width we look at for the Kinect. -->
  <node pkg="nodelet" type="nodelet" name="passthrough_x" respawn="true" args="load pcl/PassThrough kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points" />
    <remap from="~output" to="/camera/depth/points_bubble_x" />
    <rosparam> <!-- Weird frame for the camera. -->
      filter_field_name: x
      filter_limit_min: -0.4
      filter_limit_max: 0.4
      filter_limit_negative: False
    </rosparam>
  </node>
  
  <!-- Controls how far forward to look. -->
  <node pkg="nodelet" type="nodelet" name="passthrough_xx" respawn="true" args="load pcl/PassThrough kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points_bubble_x" />
    <remap from="~output" to="/camera/depth/points_bubble_xx" />
    <rosparam>
      filter_field_name: x
      filter_limit_min: 0.0
      filter_limit_max: 0.7
      filter_limit_negative: False
      input_frame: /base_link
      output_frame: /base_link
    </rosparam>
  </node>
  
  <!-- Height range to look -->
  <node pkg="nodelet" type="nodelet" name="passthrough_xxz" respawn="true" args="load pcl/PassThrough kinect_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/points_bubble_xx" />
    <remap from="~output" to="/camera/depth/points_collision" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.1
      filter_limit_max: 2.0
      filter_limit_negative: False
      input_frame: /base_link
      output_frame: /base_link
    </rosparam>
  </node>
  
  
  <node pkg="pcl_decimator" type="pcl_decimator" respawn="true" name="pcl_slicer" output="screen">
    <rosparam>
      field_name: y
      num_slices: 5
      slice_width: 0.01
      start_threshold: -1.0
      end_threshold: 1.0
    </rosparam>
  </node>
  
</launch>